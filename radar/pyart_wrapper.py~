# -*- coding: utf-8 -*-
"""
Created on Wed Jan 27 10:41:15 2016

@author: wolfensb
"""


import read_radar_data
import pyart
import os, glob, datetime
import numpy as np
import re

# Specify constants
# RADAR
RADAR_COORDS={}
RADAR_COORDS['Lema']=( 46.04079, 8.833219,1610.)
RADAR_COORDS['Dole']=(46.42562, 6.09997,1682.6)
RADAR_COORDS['Albis']=(47.28433, 8.51201,938.)
RADAR_COORDS['Plaine_Morte']=(46.37059, 7.48658,2930)

# MODEL
UNITS_SIMUL={'ZH':'dBZ','KDP':'deg/km','PHIDP':'deg','RHOHV':'-','ZDR':'dB','v_radial':'m/s','ZV':'dBZ',\
'U':'m/s','V':'m/s','W':'m/s','T':'K','RHO':'kg/m3','QR_v':'kg/m3','QS_v':'kg/m3',\
'QG_v':'kg/m3','QH_v':'kg/m3'}

VAR_LABELS_SIMUL={'ZH':'Reflectivity','KDP':'Specific diff. phase','PHIDP':'Diff. phase',\
'RHOHV':'Copolar corr. coeff.','ZDR':'Diff. reflectivity','v_radial':'Mean doppler velocity','ZV':'Vert. reflectivity',\
'U':'U-wind component','V':'V-wind component','W':'Vertical wind component','T':'Temperature','RHO':'Air density',\
'QR_v':'Mass density of rain','QS_v':'Mass density of snow','QG_v':'Mass density of graupel','QH_v':'Mass density of hail'}


VMIN_SIMUL={'ZH':0.,'KDP':0.,'PHIDP':0.,'RHOHV':0.6,'ZDR':0.,'v_radial':-25,'ZV':0.,\
'U':-30,'V':-30,'W':-10,'T':200,'RHO':0.5,'QR_v':0.,'QS_v':0.,\
'QG_v':0.,'QH_v':0.}

VMAX_SIMUL={'ZH':55,'KDP':1,'PHIDP':20,'RHOHV':1,'ZDR':2,'v_radial':25,'ZV':45,\
'U':30,'V':30,'W':10,'T':300,'RHO':1.4,'QR_v':1E-3,'QS_v':1E-3,\
'QG_v':1E-3,'QH_v':1E-2}


''' Inputs :
-------------------------------------------------------------------------------
  - filename : string:  Path of the radar PPI scan
  - high_res : boolean: True if high_res (83.3 m. radial res)
                        False if low_res (500 m. radial res)
  - vol_scan : boolean: True if all PPI scans for all elevations at that time-
                        step need to be loeaded
                        False if only that given scan (specified by filename)
                        needs to be loaded
  - max_range : float : maximum range from the radar to be considered (default
                        is infinity)
  - min_range : float : minimum range from the radar to be considered (default
                        is 10 km)
                        
'''

class pyrad_RADOP(pyart.core.Radar):
    def __init__(self,scan_type, scan):
        N_sweeps=len(scan['data'])
        
        fields={}
        fixed_angle={}
        fixed_angle['data']=np.zeros(N_sweeps,)
                
        sweep_start_ray_index={}
        sweep_start_ray_index['data']=[]
        sweep_stop_ray_index={}
        sweep_stop_ray_index['data']=[]
        
        varnames=scan['data'][0][0].values.keys()
    
        for i,k in enumerate(varnames):
            if k=='dop_spectrum': # No support for Doppler spectrum yet...
                pass
            fields[k]={}
            fields[k]['data']=[]
            fields[k]['long_name']=VAR_LABELS_SIMUL[k]
            fields[k]['units']=UNITS_SIMUL[k]
            fields[k]['valid_min']=VMIN_SIMUL[k]
            fields[k]['valid_max']=VMAX_SIMUL[k]
            
        # Initialize
        idx_start=0
        idx_stop=0
        elevations=[]
        azimuths=[]

        for i in range(N_sweeps):

        
            # Convert list of beams to array of data in polar coordinates
            polar_data_sweep={}
            for k in varnames:
                polar_data_sweep[k]=np.array([it.values[k] for it in scan['data'][i]])
                
            [N_angles,N_ranges]=polar_data_sweep[varnames[0]].shape
            
            idx_stop=idx_start+N_angles-1
            sweep_start_ray_index['data'].append(idx_start)
            sweep_stop_ray_index['data'].append(idx_stop)
            idx_start=idx_stop+1
        
            if scan_type=='ppi':
                fixed_angle['data']=scan['elevations'][i]
                elevations.extend(list([scan['elevations'][i]]*N_angles))
                azimuths.extend(list(scan['azimuths']))
            elif scan_type=='rhi':
                fixed_angle['data']=scan['azimuths'][i]
                elevations.extend(list(scan['elevations']))
                azimuths.extend(list([scan['azimuths'][i]]*N_angles))
                
            for k in varnames:
                if not len(fields[k]['data']):
                    fields[k]['data']=polar_data_sweep[k]
                else:
                    fields[k]['data']=utilities.row_stack(fields[k]['data'],polar_data_sweep[k])

        for k in varnames:
            fields[k]['data']=np.ma.array(fields[k]['data'],mask=np.isnan(fields[k]['data']))
        
        
        metadata={}
        
        
        # Position and time are obtained from the pos_time field of the scan dictionary
        latitude={'data' : np.array(scan['pos_time']['latitude'])}
        longitude={'data' :  np.array(scan['pos_time']['longitude'])}    
        altitude={'data' :  np.array(scan['pos_time']['altitude'])}   
        
        time_units='seconds since '+scan['pos_time']['time']
        time={'data' : np.zeros((N_angles,)),'units': time_units}
    
    
        sweep_number={'data' : np.arange(0,N_sweeps)}     
        sweep_mode={'data' : [scan_type]*N_sweeps}   

        metadata={}
        
        azimuth={'data' : np.array(azimuths)}
        rrange={'data': scan['ranges']}
        elevation={'data' :np.array(elevations)}
    

        # Create PyART instance
        pyart.core.Radar.__init__(self,time,rrange,fields,metadata,scan_type,latitude,longitude,altitude,sweep_number,sweep_mode,fixed_angle,\
        sweep_start_ray_index,sweep_stop_ray_index,azimuth, elevation)
        
        

class pyrad_MXPOL(pyart.core.Radar):
    def __init__(self,filename, max_range=np.Inf,min_range=10000):
        
        # Get directory name
        dirname=os.path.dirname(filename)+'/'
        if dirname=='/':
            dirname='./'
    
        all_files=[filename]
        
        
        fname_basename=os.path.basename(filename)

        # Specify loooots of inputs for the Pyart class
        if 'PPI' in fname_basename:
            scan_type='ppi'
        elif 'RHI' in fname_basename:
            scan_type='rhi'
            
        strdate=re.findall(r"([0-9]{8}-[0-9]{6})",fname_basename)[0] # Found out from the filename
        date=datetime.datetime.strptime(strdate,'%Y%m%d-%H%M%S')
        
        varnames=['Zh','Zdr','Kdp','Phidp','Rhohv','ZhCorr','ZdrCorr','RVel','Sw']
        labels=['Reflectivity','Diff. reflectivity','Spec. diff. phase','Diff. phase','Copolar corr. coeff','Att. corr reflectivity',\
        'Att corr. diff. reflectivity.','Mean doppler velocity','Spectral Width']
        
        units=['dBZ','dB','deg/km','deg','-','dBZ','dB','m/s','m2/s2']
        
    
        vmin=[0.,0.,0.,0.,0.6,0.,0.,-15.,0.]
        vmax=[55.,3.,4.,45.,1.,55.,3.,15.,3.]
                
        N_sweeps=len(all_files)
        fields={}
        fixed_angle={}
        fixed_angle['data']=np.zeros(N_sweeps,)
        
        sweep_start_ray_index={}
        sweep_start_ray_index['data']=[]
        sweep_stop_ray_index={}
        sweep_stop_ray_index['data']=[]
        
        for i,k in enumerate(varnames):
            fields[k]={}
            fields[k]['data']=[]
            fields[k]['long_name']=labels[i]
            fields[k]['units']=units[i]
            fields[k]['valid_min']=vmin[i]
            fields[k]['valid_max']=vmax[i]
            
        # Initialize
        idx_start=0
        idx_stop=0
        elevations=[]
        azimuths=[]
        nyquist=[]

        for i in range(N_sweeps):
            data=utilities.readMXPOLRadData(all_files[i],varnames,max_range)
            fixed_angle['data']=data['elevation']
            [N_ranges,N_az]=data[varnames[0]].shape
            idx_stop=idx_start+N_az-1
            sweep_start_ray_index['data'].append(idx_start)
            sweep_stop_ray_index['data'].append(idx_stop)
            idx_start=idx_stop+1
            elevations.extend(list(data['elevation']))
            nyquist.extend([data['nyquist_vel']]*N_az)
            azimuths.extend(list(data['azimuth']))
            
            for j,v in enumerate(varnames):
                if v in data.keys():
                    if not len(fields[v]['data']):
                        fields[v]['data']=data[v]
                    else:
                        fields[v]['data']=utilities.row_stack(fields[v]['data'],data[v])
                else:
                    print('Variable '+v+' was not found in file!')
        for v in varnames:
            fields[v]['data']=np.ma.array(fields[v]['data'],mask=np.isnan(fields[v]['data']))
        
        
        metadata={}
        
        [a,N_ranges]=fields[varnames[0]]['data'].shape
        
        latitude={'data' : data['latitude']}
        longitude={'data' :data['longitude']}    
        altitude={'data' : data['altitude']}     
        sweep_number={'data' : np.arange(0,len(all_files))}     
        sweep_mode={'data' : [scan_type]*N_sweeps}   
        instrument_parameters={'nyquist_velocity': {'data':np.array(nyquist)}}
        
        metadata={}
        
        azimuth={'data' : np.array(azimuths)}
        rrange={'data':np.arange(N_ranges)*data['resolution']}
        elevation={'data' :np.array(elevations)}
    
        time_units='seconds since '+str(date)
        time={'data' : data['time'],'units': time_units}
    
        # Create PyART instance
        pyart.core.Radar.__init__(self,time,rrange,fields,metadata,scan_type,latitude,longitude,altitude,sweep_number,sweep_mode,fixed_angle,\
        sweep_start_ray_index,sweep_stop_ray_index,azimuth, elevation,instrument_parameters=instrument_parameters)


class pyrad_CH(pyart.core.Radar):
    def __init__(self,filename, high_res, vol_scan=False, max_range=np.Inf):
        
        # Get directory name
        dirname=os.path.dirname(filename)+'/'
        if dirname=='/':
            dirname='./'
    
        # If vol_scan : retrieve files with same timestamp
        fname_basename=os.path.basename(filename)
        if vol_scan:
            all_files=np.sort(glob.glob(dirname+fname_basename[0:15]+'*.h5'))
        else:
            all_files=[filename]
        
        # Get name of radar
        index_letter=fname_basename[2]
        if index_letter == 'A':
            radar_name='Albis'
        elif index_letter == 'L':
            radar_name='Lema'
        elif index_letter == 'D':
            radar_name='Dole'
        elif index_letter == 'P':
            radar_name='Plaine_Morte'
        
        # Get radar resolution
        if high_res:
            rres=83.3
        else:
            rres=500.
        
        # Specify loooots of inputs for the Pyart class
        
        scan_type='ppi'
        time=datetime.datetime.strptime(fname_basename[3:12],'%y%j%H%M')
        
        varnames=['Z','ZDR','ZV','V','W','RHO','CLUT','PHIDP']
        labels=['Reflectivity','Diff. reflectivity','Vert. reflectivity','Mean doppler velocity','Spectral Width','Copolar corr. coeff.','Clutter','Diff. phase']
        units=['dBZ','dB','dBZ','m/s','(m/s)^2','-','-','deg']
        vmin=[0,0,0,-15,0,0.6,0,0]
        vmax=[55.,3.,45.,15,3,1,100,150]
        
        N_sweeps=len(all_files)
        
        fields={}
        fixed_angle={}
        fixed_angle['data']=np.zeros(N_sweeps,)
        
        sweep_start_ray_index={}
        sweep_start_ray_index['data']=[]
        sweep_stop_ray_index={}
        sweep_stop_ray_index['data']=[]
        
        for i,k in enumerate(varnames):
            fields[k]={}
            fields[k]['data']=[]
            fields[k]['long_name']=labels[i]
            fields[k]['units']=units[i]
            fields[k]['valid_min']=vmin[i]
            fields[k]['valid_max']=vmax[i]
            
        # Initialize
        idx_start=0
        idx_stop=0
        elevations=[]
        azimuths=[]
        nyquist=[]
        
        for i in range(N_sweeps):
            data=utilities.readCHRadData(all_files[i],varnames,rres,max_range)
            fixed_angle['data']=data['elevation']
            [N_az,N_ranges]=data[varnames[0]].shape
            idx_stop=idx_start+N_az-1
            sweep_start_ray_index['data'].append(idx_start)
            sweep_stop_ray_index['data'].append(idx_stop)
            idx_start=idx_stop+1
            elevations.extend([data['elevation']]*N_az)
            nyquist.extend([data['nyquist_vel']]*N_az)
            azimuths.extend(list(data['azimuth']))
            for j,v in enumerate(varnames):
                if not len(fields[v]['data']):
                    fields[v]['data']=data[v]
                else:
                    fields[v]['data']=utilities.row_stack(fields[v]['data'],data[v])
                    
        for v in varnames:
            fields[v]['data']=np.ma.array(fields[v]['data'],mask=np.isnan(fields[v]['data']))
                
        metadata={}
        
        [a,N_ranges]=fields[varnames[0]]['data'].shape
        
        latitude={'data' : np.array([RADAR_COORDS[radar_name][0]])}
        longitude={'data' : np.array([RADAR_COORDS[radar_name][1]])}    
        altitude={'data' : np.array([RADAR_COORDS[radar_name][2]])}     
        sweep_number={'data' : np.arange(0,len(all_files))}     
        sweep_mode={'data' : ['ppi']*N_sweeps}   
        instrument_parameters={'nyquist_velocity': {'data':np.array(nyquist)}}
        
        metadata={}
        
        azimuth={'data' : np.array(azimuths)}
        rrange={'data':np.arange(N_ranges)*data['resolution']}
        elevation={'data' :np.array(elevations)}
    
        time_units='seconds since '+str(time)
        time={'data' : np.zeros((len(elevations),)),'units': time_units}
    
        # Create PyART instance
        pyart.core.Radar.__init__(self,time,rrange,fields,metadata,scan_type,latitude,longitude,altitude,sweep_number,sweep_mode,fixed_angle,\
        sweep_start_ray_index,sweep_stop_ray_index,azimuth, elevation,instrument_parameters=instrument_parameters)

    def correct_velocity(self):
        corr_vel=pyart.correct.dealias_region_based(self,interval_splits=3,vel_field='V',rays_wrap_around=True)
        corr_vel['units']='m/s'
        corr_vel.pop('standard_name')
        corr_vel['valid_min']=np.nanmin(corr_vel['data'])
        corr_vel['valid_max']=np.nanmax(corr_vel['data'])    
        self.add_field('V_corr',corr_vel)
        
    @staticmethod
    def ang_to_sweep(angle):
        from utilities import dic_elev, ELEVATION_ANGLES
        try:
            sweep=dic_elev[str(angle)]
        except:
            print 'No PPI scan available for that elevation angle'
            print 'Specify one of these'
            print str(str(ELEVATION_ANGLES))
            return
            
        return sweep

if __name__=='__main__':
#    a=pyrad_RADOP('ppi',r)
#    f='/ltedata/HYMEX/SOP_2012/Radar/Proc_data/2012/09/29/MXPol-polar-20120929-123446-RHI-233_6.nc'
#    a=pyrad_MXPOL(f)
#    
#    display = pyart.graph.RadarDisplay(a, shift=(0.0, 0.0))
#    display.plot('v_radial', 0, colorbar_flag=True,title="v_radial")
#    
    filename='/ltedata/MeteoSwiss_Full_Radar_Data_LowRes/PLD14098/PLD1409805007U.005.h5'
    rad_instance=pyrad_CH('/ltedata/MeteoSwiss_Full_Radar_Data_LowRes/PLD14098/PLD1409808207U.003.h5',high_res=False,vol_scan=False)
    rad_instance.correct_velocity()
    plt.figure()
    display = pyart.graph.RadarDisplay(rad_instance, shift=(0.0, 0.0))
    display.plot('V_corr', 0, colorbar_flag=True,title="V_corr")        
